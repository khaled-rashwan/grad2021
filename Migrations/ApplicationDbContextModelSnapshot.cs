// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using grad2021.Data;

namespace grad2021.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("grad2021.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstSemesterControlStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstSemesterExamsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstSemesterObjectionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstSemesterObjectionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstSemesterStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NovemberControlStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NovemberExamsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NovemberObjectionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NovemberObjectionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondSemesterControlStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondSemesterExamsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondSemesterObjectionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondSemesterObjectionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondSemesterStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicYearID");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            AcademicYearID = 2021
                        },
                        new
                        {
                            AcademicYearID = 2022
                        },
                        new
                        {
                            AcademicYearID = 2023
                        });
                });

            modelBuilder.Entity("grad2021.Models.Branch", b =>
                {
                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FullCapacity")
                        .HasColumnType("int");

                    b.HasKey("BranchName");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchName = "الهندسة المدنية",
                            BranchDescription = "وصف قسم الهندسة المدنية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة المدنية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "الهندسة المعمارية",
                            BranchDescription = "وصف قسم الهندسة المعمارية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة المعمارية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            BranchDescription = "وصف قسم الرياضيات والفيزيقا الهندسية",
                            CurrentCapacity = 0,
                            DepartmentName = "الرياضيات والفيزيقا الهندسية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "هندسة القوى والآلات الكهربية",
                            BranchDescription = "وصف شعبة هندسة القوى والآلات الكهربية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الكهربية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "هندسة الإلكترونيات والاتصالات الكهربية",
                            BranchDescription = "وصف شعبة هندسة الإلكترونيات والاتصالات الكهربية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الكهربية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "هندسة الحاسبات والنظم",
                            BranchDescription = "وصف شعبة هندسة الحاسبات والنظم",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الكهربية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "الهندسة الميكانيكية",
                            BranchDescription = "وصف قسم الهندسة الميكانيكية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الميكانيكية",
                            FullCapacity = 1
                        },
                        new
                        {
                            BranchName = "هندسة الإنتاج والتصميم الميكانيكي",
                            BranchDescription = "وصف شعبة هندسة الإنتاج والتصميم الميكانيكي",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الميكانيكية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "الهندسة الصناعية",
                            BranchDescription = "وصف شعبة الهندسة الصناعية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الميكانيكية",
                            FullCapacity = 2
                        },
                        new
                        {
                            BranchName = "هندسة القوى الميكانيكية",
                            BranchDescription = "وصف شعبة هندسة القوى الميكانيكية",
                            CurrentCapacity = 0,
                            DepartmentName = "الهندسة الميكانيكية",
                            FullCapacity = 2
                        });
                });

            modelBuilder.Entity("grad2021.Models.Course", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CourseWorkMaxScore")
                        .HasColumnType("float");

                    b.Property<string>("DepartmentCodeValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LectureWeeklyDuration")
                        .HasColumnType("int");

                    b.Property<double>("MidTermExamMaxScore")
                        .HasColumnType("float");

                    b.Property<double>("OralExamMaxScore")
                        .HasColumnType("float");

                    b.Property<int?>("SectionWeeklyDuration")
                        .HasColumnType("int");

                    b.Property<double>("TermExamMaxScore")
                        .HasColumnType("float");

                    b.HasKey("CourseName");

                    b.HasIndex("DepartmentCodeValue");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseName = "حساب التفاضل",
                            CourseCode = "001",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "ريض",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "خواص المادة ومبادئ الديناميكا الحرارية",
                            CourseCode = "001",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "فيز",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "جيولوجيا ھندسية",
                            CourseCode = "102",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "مدن",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "مجالات كھربية ومغناطيسية ٢",
                            CourseCode = "203",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "كھع",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "ھندسة الاتصالات والالكترونيات",
                            CourseCode = "215",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "كهت",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "اختبارات كھربية",
                            CourseCode = "305",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "كهق",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "البرمجيات الھندسية",
                            CourseCode = "207",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "كهح",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "التشييد ونظم البناء",
                            CourseCode = "126",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "عمر",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "الأساسات",
                            CourseCode = "222",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "مدن",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "ميكانيكا الھياكل",
                            CourseCode = "213",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "تمج",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "إدارة ھندسية",
                            CourseCode = "216",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "صنع",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        },
                        new
                        {
                            CourseName = "ھندسة ميكانيكية 1",
                            CourseCode = "105",
                            CourseWorkMaxScore = 10.0,
                            DepartmentCodeValue = "قوى",
                            MidTermExamMaxScore = 20.0,
                            OralExamMaxScore = 10.0,
                            TermExamMaxScore = 60.0
                        });
                });

            modelBuilder.Entity("grad2021.Models.CourseEnrollment", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelName")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("CourseName", "BranchName");

                    b.HasIndex("BranchName");

                    b.ToTable("CourseEnrollments");

                    b.HasData(
                        new
                        {
                            CourseName = "حساب التفاضل",
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            LevelName = 0,
                            Term = 0
                        },
                        new
                        {
                            CourseName = "ھندسة الاتصالات والالكترونيات",
                            BranchName = "هندسة القوى والآلات الكهربية",
                            LevelName = 2,
                            Term = 1
                        },
                        new
                        {
                            CourseName = "اختبارات كھربية",
                            BranchName = "هندسة القوى والآلات الكهربية",
                            LevelName = 2,
                            Term = 1
                        },
                        new
                        {
                            CourseName = "مجالات كھربية ومغناطيسية ٢",
                            BranchName = "هندسة القوى والآلات الكهربية",
                            LevelName = 3,
                            Term = 1
                        },
                        new
                        {
                            CourseName = "إدارة ھندسية",
                            BranchName = "الهندسة الميكانيكية",
                            LevelName = 2,
                            Term = 0
                        },
                        new
                        {
                            CourseName = "ميكانيكا الھياكل",
                            BranchName = "الهندسة الميكانيكية",
                            LevelName = 2,
                            Term = 0
                        },
                        new
                        {
                            CourseName = "خواص المادة ومبادئ الديناميكا الحرارية",
                            BranchName = "الهندسة الميكانيكية",
                            LevelName = 2,
                            Term = 0
                        },
                        new
                        {
                            CourseName = "ھندسة ميكانيكية 1",
                            BranchName = "الهندسة الميكانيكية",
                            LevelName = 1,
                            Term = 0
                        },
                        new
                        {
                            CourseName = "الأساسات",
                            BranchName = "الهندسة المدنية",
                            LevelName = 1,
                            Term = 0
                        });
                });

            modelBuilder.Entity("grad2021.Models.Department", b =>
                {
                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentName");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentName = "الرياضيات والفيزيقا الهندسية",
                            DepartmentDescription = "وصف قسم الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentName = "الهندسة المدنية",
                            DepartmentDescription = "وصف قسم الهندسة المدنية"
                        },
                        new
                        {
                            DepartmentName = "الهندسة الكهربية",
                            DepartmentDescription = "وصف قسم الهندسة الكهربية"
                        },
                        new
                        {
                            DepartmentName = "الهندسة المعمارية",
                            DepartmentDescription = "وصف قسم الهندسة المعمارية"
                        },
                        new
                        {
                            DepartmentName = "الهندسة الميكانيكية",
                            DepartmentDescription = "وصف قسم الهندسة الميكانيكية"
                        });
                });

            modelBuilder.Entity("grad2021.Models.DepartmentCode", b =>
                {
                    b.Property<string>("DepartmentCodeValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepartmentCodeValue");

                    b.HasIndex("DepartmentName");

                    b.ToTable("DepartmentCodes");

                    b.HasData(
                        new
                        {
                            DepartmentCodeValue = "ريض",
                            DepartmentName = "الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentCodeValue = "فيز",
                            DepartmentName = "الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentCodeValue = "ميك",
                            DepartmentName = "الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentCodeValue = "عام",
                            DepartmentName = "الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentCodeValue = "هند",
                            DepartmentName = "الرياضيات والفيزيقا الهندسية"
                        },
                        new
                        {
                            DepartmentCodeValue = "مدن",
                            DepartmentName = "الهندسة المدنية"
                        },
                        new
                        {
                            DepartmentCodeValue = "عمر",
                            DepartmentName = "الهندسة المعمارية"
                        },
                        new
                        {
                            DepartmentCodeValue = "كھع",
                            DepartmentName = "الهندسة الكهربية"
                        },
                        new
                        {
                            DepartmentCodeValue = "كهق",
                            DepartmentName = "الهندسة الكهربية"
                        },
                        new
                        {
                            DepartmentCodeValue = "كهت",
                            DepartmentName = "الهندسة الكهربية"
                        },
                        new
                        {
                            DepartmentCodeValue = "كهح",
                            DepartmentName = "الهندسة الكهربية"
                        },
                        new
                        {
                            DepartmentCodeValue = "تمج",
                            DepartmentName = "الهندسة الميكانيكية"
                        },
                        new
                        {
                            DepartmentCodeValue = "صنع",
                            DepartmentName = "الهندسة الميكانيكية"
                        },
                        new
                        {
                            DepartmentCodeValue = "قوى",
                            DepartmentName = "الهندسة الميكانيكية"
                        });
                });

            modelBuilder.Entity("grad2021.Models.Instructor", b =>
                {
                    b.Property<decimal>("InstructorNatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstructorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Phone")
                        .HasColumnType("bigint");

                    b.HasKey("InstructorNatId");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorNatId = 2983423493422m,
                            DepartmentName = "الرياضيات والفيزيقا الهندسية",
                            InstructorName = "محمد عبد السلام"
                        },
                        new
                        {
                            InstructorNatId = 7567456456646m,
                            DepartmentName = "الهندسة الكهربية",
                            InstructorName = "إبراهيم فايق"
                        },
                        new
                        {
                            InstructorNatId = 435345345345m,
                            DepartmentName = "الهندسة الميكانيكية",
                            InstructorName = "فايز السيد"
                        },
                        new
                        {
                            InstructorNatId = 435345345390m,
                            DepartmentName = "الهندسة المدنية",
                            InstructorName = "أحمد السيد"
                        });
                });

            modelBuilder.Entity("grad2021.Models.InstructorEnrollment", b =>
                {
                    b.Property<int>("InstructorEnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicYearID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("InstructorNatId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("InstructorEnrollmentID");

                    b.HasIndex("AcademicYearID");

                    b.HasIndex("InstructorNatId");

                    b.HasIndex("CourseName", "BranchName");

                    b.ToTable("InstructorEnrollments");

                    b.HasData(
                        new
                        {
                            InstructorEnrollmentID = 1,
                            AcademicYearID = 2023,
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            CourseName = "حساب التفاضل",
                            InstructorNatId = 2983423493422m
                        },
                        new
                        {
                            InstructorEnrollmentID = 2,
                            AcademicYearID = 2023,
                            BranchName = "هندسة القوى والآلات الكهربية",
                            CourseName = "ھندسة الاتصالات والالكترونيات",
                            InstructorNatId = 7567456456646m
                        },
                        new
                        {
                            InstructorEnrollmentID = 3,
                            AcademicYearID = 2023,
                            BranchName = "هندسة القوى والآلات الكهربية",
                            CourseName = "اختبارات كھربية",
                            InstructorNatId = 7567456456646m
                        },
                        new
                        {
                            InstructorEnrollmentID = 4,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "إدارة ھندسية",
                            InstructorNatId = 435345345345m
                        },
                        new
                        {
                            InstructorEnrollmentID = 5,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "ميكانيكا الھياكل",
                            InstructorNatId = 435345345345m
                        },
                        new
                        {
                            InstructorEnrollmentID = 6,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "خواص المادة ومبادئ الديناميكا الحرارية",
                            InstructorNatId = 435345345345m
                        },
                        new
                        {
                            InstructorEnrollmentID = 7,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "ھندسة ميكانيكية 1",
                            InstructorNatId = 435345345345m
                        },
                        new
                        {
                            InstructorEnrollmentID = 8,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة المدنية",
                            CourseName = "الأساسات",
                            InstructorNatId = 435345345345m
                        });
                });

            modelBuilder.Entity("grad2021.Models.InstructorProfession", b =>
                {
                    b.Property<int>("InstructorProfessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("InstructorNatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("ProfessionDegree")
                        .HasColumnType("int");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InstructorProfessionID");

                    b.HasIndex("InstructorNatId");

                    b.ToTable("InstructorProfessions");

                    b.HasData(
                        new
                        {
                            InstructorProfessionID = 1,
                            InstructorNatId = 2983423493422m,
                            ProfessionDegree = 4,
                            PromotionDate = new DateTime(2021, 5, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            InstructorProfessionID = 2,
                            InstructorNatId = 7567456456646m,
                            ProfessionDegree = 3,
                            PromotionDate = new DateTime(2021, 5, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            InstructorProfessionID = 3,
                            InstructorNatId = 435345345345m,
                            ProfessionDegree = 2,
                            PromotionDate = new DateTime(2021, 5, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            InstructorProfessionID = 4,
                            InstructorNatId = 435345345390m,
                            ProfessionDegree = 2,
                            PromotionDate = new DateTime(2021, 5, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("grad2021.Models.Selection", b =>
                {
                    b.Property<int>("SelectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicYearID")
                        .HasColumnType("int");

                    b.Property<string>("CurrentBranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectionBranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SelectionNo")
                        .HasColumnType("int");

                    b.Property<decimal>("StudentNatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("StudentNatId1")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("SelectionID");

                    b.HasIndex("AcademicYearID");

                    b.HasIndex("CurrentBranchName");

                    b.HasIndex("SelectionBranchName");

                    b.HasIndex("StudentNatId1");

                    b.HasIndex("StudentNatId", "AcademicYearID");

                    b.ToTable("Selection");

                    b.HasData(
                        new
                        {
                            SelectionID = 1,
                            AcademicYearID = 2023,
                            CurrentBranchName = "الرياضيات والفيزيقا الهندسية",
                            SelectionBranchName = "الهندسة الميكانيكية",
                            SelectionNo = 1,
                            StudentNatId = 535340593458m
                        },
                        new
                        {
                            SelectionID = 2,
                            AcademicYearID = 2023,
                            CurrentBranchName = "الرياضيات والفيزيقا الهندسية",
                            SelectionBranchName = "الهندسة المدنية",
                            SelectionNo = 2,
                            StudentNatId = 535340593458m
                        },
                        new
                        {
                            SelectionID = 3,
                            AcademicYearID = 2023,
                            CurrentBranchName = "الرياضيات والفيزيقا الهندسية",
                            SelectionBranchName = "الهندسة الميكانيكية",
                            SelectionNo = 1,
                            StudentNatId = 535340593459m
                        },
                        new
                        {
                            SelectionID = 4,
                            AcademicYearID = 2023,
                            CurrentBranchName = "الرياضيات والفيزيقا الهندسية",
                            SelectionBranchName = "الهندسة المدنية",
                            SelectionNo = 2,
                            StudentNatId = 535340593459m
                        });
                });

            modelBuilder.Entity("grad2021.Models.Student", b =>
                {
                    b.Property<decimal>("StudentNatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<long?>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int?>("SeatNo")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentNatId");

                    b.ToTable("Students");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Student");

                    b.HasData(
                        new
                        {
                            StudentNatId = 535340593458m,
                            Gender = 1,
                            StudentName = "إيمان محمود رشوان"
                        },
                        new
                        {
                            StudentNatId = 535340593459m,
                            Gender = 1,
                            StudentName = "إحسان محمود رشوان"
                        },
                        new
                        {
                            StudentNatId = 789654564m,
                            Gender = 1,
                            StudentName = "أميرة محمود رشوان"
                        },
                        new
                        {
                            StudentNatId = 976546345334m,
                            Gender = 0,
                            StudentName = "حسن محمود رشوان"
                        });
                });

            modelBuilder.Entity("grad2021.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicYearID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CourseWorkMark")
                        .HasColumnType("float");

                    b.Property<double>("FinalExamMark")
                        .HasColumnType("float");

                    b.Property<bool>("IsNovember")
                        .HasColumnType("bit");

                    b.Property<double>("MerciMark")
                        .HasColumnType("float");

                    b.Property<double>("MidTermMark")
                        .HasColumnType("float");

                    b.Property<double>("OralExamMark")
                        .HasColumnType("float");

                    b.Property<decimal>("StudentNatId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("StudentCourseID");

                    b.HasIndex("CourseName", "BranchName");

                    b.HasIndex("StudentNatId", "AcademicYearID");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentCourseID = 1,
                            AcademicYearID = 2023,
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            CourseName = "حساب التفاضل",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 0.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 535340593458m
                        },
                        new
                        {
                            StudentCourseID = 2,
                            AcademicYearID = 2023,
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            CourseName = "حساب التفاضل",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 0.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 535340593459m
                        },
                        new
                        {
                            StudentCourseID = 3,
                            AcademicYearID = 2023,
                            BranchName = "هندسة القوى والآلات الكهربية",
                            CourseName = "ھندسة الاتصالات والالكترونيات",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 70.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 789654564m
                        },
                        new
                        {
                            StudentCourseID = 4,
                            AcademicYearID = 2023,
                            BranchName = "هندسة القوى والآلات الكهربية",
                            CourseName = "اختبارات كھربية",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 10.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 789654564m
                        },
                        new
                        {
                            StudentCourseID = 5,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "إدارة ھندسية",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 0.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 976546345334m
                        },
                        new
                        {
                            StudentCourseID = 6,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "ميكانيكا الھياكل",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 0.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 976546345334m
                        },
                        new
                        {
                            StudentCourseID = 7,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            CourseName = "خواص المادة ومبادئ الديناميكا الحرارية",
                            CourseWorkMark = 0.0,
                            FinalExamMark = 0.0,
                            IsNovember = false,
                            MerciMark = 0.0,
                            MidTermMark = 0.0,
                            OralExamMark = 0.0,
                            StudentNatId = 976546345334m
                        });
                });

            modelBuilder.Entity("grad2021.Models.StudentEnrollment", b =>
                {
                    b.Property<decimal>("StudentNatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("AcademicYearID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsNovember")
                        .HasColumnType("bit");

                    b.Property<int>("LevelName")
                        .HasColumnType("int");

                    b.HasKey("StudentNatId", "AcademicYearID");

                    b.HasIndex("AcademicYearID");

                    b.HasIndex("BranchName");

                    b.ToTable("StudentEnrollments");

                    b.HasData(
                        new
                        {
                            StudentNatId = 535340593458m,
                            AcademicYearID = 2023,
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            IsNovember = false,
                            LevelName = 0
                        },
                        new
                        {
                            StudentNatId = 535340593459m,
                            AcademicYearID = 2023,
                            BranchName = "الرياضيات والفيزيقا الهندسية",
                            IsNovember = false,
                            LevelName = 0
                        },
                        new
                        {
                            StudentNatId = 789654564m,
                            AcademicYearID = 2023,
                            BranchName = "هندسة القوى والآلات الكهربية",
                            IsNovember = false,
                            LevelName = 2
                        },
                        new
                        {
                            StudentNatId = 976546345334m,
                            AcademicYearID = 2023,
                            BranchName = "الهندسة الميكانيكية",
                            IsNovember = false,
                            LevelName = 2
                        });
                });

            modelBuilder.Entity("grad2021.Models.StudentTransfer", b =>
                {
                    b.HasBaseType("grad2021.Models.Student");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelName")
                        .HasColumnType("int");

                    b.HasIndex("BranchName1");

                    b.HasDiscriminator().HasValue("StudentTransfer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("grad2021.Models.Branch", b =>
                {
                    b.HasOne("grad2021.Models.Department", "Department")
                        .WithMany("Branches")
                        .HasForeignKey("DepartmentName");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("grad2021.Models.Course", b =>
                {
                    b.HasOne("grad2021.Models.DepartmentCode", "DepartmentCode")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentCodeValue");

                    b.Navigation("DepartmentCode");
                });

            modelBuilder.Entity("grad2021.Models.CourseEnrollment", b =>
                {
                    b.HasOne("grad2021.Models.Branch", "Branch")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("BranchName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grad2021.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("grad2021.Models.DepartmentCode", b =>
                {
                    b.HasOne("grad2021.Models.Department", "Department")
                        .WithMany("DepartmentCodes")
                        .HasForeignKey("DepartmentName");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("grad2021.Models.Instructor", b =>
                {
                    b.HasOne("grad2021.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentName");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("grad2021.Models.InstructorEnrollment", b =>
                {
                    b.HasOne("grad2021.Models.AcademicYear", "AcademicYear")
                        .WithMany("InstructorEnrollments")
                        .HasForeignKey("AcademicYearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("grad2021.Models.Instructor", "Instructor")
                        .WithMany("InstructorEnrollments")
                        .HasForeignKey("InstructorNatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("grad2021.Models.CourseEnrollment", "CourseEnrollment")
                        .WithMany("InstructorEnrollments")
                        .HasForeignKey("CourseName", "BranchName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AcademicYear");

                    b.Navigation("CourseEnrollment");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("grad2021.Models.InstructorProfession", b =>
                {
                    b.HasOne("grad2021.Models.Instructor", "Instructor")
                        .WithMany("InstructorProfessions")
                        .HasForeignKey("InstructorNatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("grad2021.Models.Selection", b =>
                {
                    b.HasOne("grad2021.Models.AcademicYear", null)
                        .WithMany("Selections")
                        .HasForeignKey("AcademicYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grad2021.Models.Branch", "CurrentBranch")
                        .WithMany("CurrentBranches")
                        .HasForeignKey("CurrentBranchName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("grad2021.Models.Branch", "SelectionBranch")
                        .WithMany("SelectionBranches")
                        .HasForeignKey("SelectionBranchName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("grad2021.Models.Student", null)
                        .WithMany("Selections")
                        .HasForeignKey("StudentNatId1");

                    b.HasOne("grad2021.Models.StudentEnrollment", "StudentEnrollment")
                        .WithMany("Selections")
                        .HasForeignKey("StudentNatId", "AcademicYearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentBranch");

                    b.Navigation("SelectionBranch");

                    b.Navigation("StudentEnrollment");
                });

            modelBuilder.Entity("grad2021.Models.StudentCourse", b =>
                {
                    b.HasOne("grad2021.Models.CourseEnrollment", "CourseEnrollment")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseName", "BranchName");

                    b.HasOne("grad2021.Models.StudentEnrollment", "StudentEnrollment")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentNatId", "AcademicYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseEnrollment");

                    b.Navigation("StudentEnrollment");
                });

            modelBuilder.Entity("grad2021.Models.StudentEnrollment", b =>
                {
                    b.HasOne("grad2021.Models.AcademicYear", "AcademicYear")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("AcademicYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grad2021.Models.Branch", "Branch")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("BranchName");

                    b.HasOne("grad2021.Models.Student", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentNatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Branch");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("grad2021.Models.StudentTransfer", b =>
                {
                    b.HasOne("grad2021.Models.Branch", null)
                        .WithMany("StudentTransfers")
                        .HasForeignKey("BranchName1");
                });

            modelBuilder.Entity("grad2021.Models.AcademicYear", b =>
                {
                    b.Navigation("InstructorEnrollments");

                    b.Navigation("Selections");

                    b.Navigation("StudentEnrollments");
                });

            modelBuilder.Entity("grad2021.Models.Branch", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CurrentBranches");

                    b.Navigation("SelectionBranches");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("StudentTransfers");
                });

            modelBuilder.Entity("grad2021.Models.Course", b =>
                {
                    b.Navigation("CourseEnrollments");
                });

            modelBuilder.Entity("grad2021.Models.CourseEnrollment", b =>
                {
                    b.Navigation("InstructorEnrollments");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("grad2021.Models.Department", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("DepartmentCodes");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("grad2021.Models.DepartmentCode", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("grad2021.Models.Instructor", b =>
                {
                    b.Navigation("InstructorEnrollments");

                    b.Navigation("InstructorProfessions");
                });

            modelBuilder.Entity("grad2021.Models.Student", b =>
                {
                    b.Navigation("Selections");

                    b.Navigation("StudentEnrollments");
                });

            modelBuilder.Entity("grad2021.Models.StudentEnrollment", b =>
                {
                    b.Navigation("Selections");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
